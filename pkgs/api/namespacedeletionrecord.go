// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// NamespaceDeletionRecordIdentity represents the Identity of the object.
var NamespaceDeletionRecordIdentity = elemental.Identity{
	Name:     "namespacedeletionrecord",
	Category: "namespacedeletionrecords",
	Package:  "a3s",
	Private:  false,
}

// NamespaceDeletionRecordsList represents a list of NamespaceDeletionRecords
type NamespaceDeletionRecordsList []*NamespaceDeletionRecord

// Identity returns the identity of the objects in the list.
func (o NamespaceDeletionRecordsList) Identity() elemental.Identity {

	return NamespaceDeletionRecordIdentity
}

// Copy returns a pointer to a copy the NamespaceDeletionRecordsList.
func (o NamespaceDeletionRecordsList) Copy() elemental.Identifiables {

	out := append(NamespaceDeletionRecordsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the NamespaceDeletionRecordsList.
func (o NamespaceDeletionRecordsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(NamespaceDeletionRecordsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*NamespaceDeletionRecord))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o NamespaceDeletionRecordsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o NamespaceDeletionRecordsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the NamespaceDeletionRecordsList converted to SparseNamespaceDeletionRecordsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o NamespaceDeletionRecordsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseNamespaceDeletionRecordsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseNamespaceDeletionRecord)
	}

	return out
}

// Version returns the version of the content.
func (o NamespaceDeletionRecordsList) Version() int {

	return 1
}

// NamespaceDeletionRecord represents the model of a namespacedeletionrecord
type NamespaceDeletionRecord struct {
	// ID is the identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Deletion date of the object.
	DeleteTime time.Time `json:"deleteTime" msgpack:"deleteTime" bson:"deletetime" mapstructure:"deleteTime,omitempty"`

	// Namespace that got deleted.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Hash of the object used to shard the data.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewNamespaceDeletionRecord returns a new *NamespaceDeletionRecord
func NewNamespaceDeletionRecord() *NamespaceDeletionRecord {

	return &NamespaceDeletionRecord{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *NamespaceDeletionRecord) Identity() elemental.Identity {

	return NamespaceDeletionRecordIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *NamespaceDeletionRecord) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *NamespaceDeletionRecord) SetIdentifier(id string) {

	o.ID = id
}

// MarshalBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NamespaceDeletionRecord) MarshalBSON() ([]byte, error) {

	if o == nil {
		return nil, nil
	}

	s := mongoAttributesNamespaceDeletionRecord{}

	if o.ID != "" {
		objectID, err := primitive.ObjectIDFromHex(o.ID)
		if err != nil {
			return nil, err
		}
		s.ID = objectID
	}
	s.DeleteTime = o.DeleteTime
	s.Namespace = o.Namespace
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return bson.Marshal(s)
}

// UnmarshalBSON implements the bson unmarshaling interface.
// This is used to transparently convert MongoDBID to ID.
func (o *NamespaceDeletionRecord) UnmarshalBSON(raw []byte) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesNamespaceDeletionRecord{}
	if err := bson.Unmarshal(raw, s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.DeleteTime = s.DeleteTime
	o.Namespace = s.Namespace
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *NamespaceDeletionRecord) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *NamespaceDeletionRecord) BleveType() string {

	return "namespacedeletionrecord"
}

// DefaultOrder returns the list of default ordering fields.
func (o *NamespaceDeletionRecord) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *NamespaceDeletionRecord) Doc() string {

	return `A namespace deletion record holds the namespace that was deleted and the date it
was deleted.`
}

func (o *NamespaceDeletionRecord) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetID returns the ID of the receiver.
func (o *NamespaceDeletionRecord) GetID() string {

	return o.ID
}

// SetID sets the property ID of the receiver using the given value.
func (o *NamespaceDeletionRecord) SetID(ID string) {

	o.ID = ID
}

// GetZHash returns the ZHash of the receiver.
func (o *NamespaceDeletionRecord) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *NamespaceDeletionRecord) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *NamespaceDeletionRecord) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *NamespaceDeletionRecord) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *NamespaceDeletionRecord) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseNamespaceDeletionRecord{
			ID:         &o.ID,
			DeleteTime: &o.DeleteTime,
			Namespace:  &o.Namespace,
			ZHash:      &o.ZHash,
			Zone:       &o.Zone,
		}
	}

	sp := &SparseNamespaceDeletionRecord{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "deleteTime":
			sp.DeleteTime = &(o.DeleteTime)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseNamespaceDeletionRecord to the object.
func (o *NamespaceDeletionRecord) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseNamespaceDeletionRecord)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.DeleteTime != nil {
		o.DeleteTime = *so.DeleteTime
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the NamespaceDeletionRecord.
func (o *NamespaceDeletionRecord) DeepCopy() *NamespaceDeletionRecord {

	if o == nil {
		return nil
	}

	out := &NamespaceDeletionRecord{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *NamespaceDeletionRecord.
func (o *NamespaceDeletionRecord) DeepCopyInto(out *NamespaceDeletionRecord) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy NamespaceDeletionRecord: %s", err))
	}

	*out = *target.(*NamespaceDeletionRecord)
}

// Validate valides the current information stored into the structure.
func (o *NamespaceDeletionRecord) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*NamespaceDeletionRecord) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := NamespaceDeletionRecordAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return NamespaceDeletionRecordLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*NamespaceDeletionRecord) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return NamespaceDeletionRecordAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *NamespaceDeletionRecord) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "deleteTime":
		return o.DeleteTime
	case "namespace":
		return o.Namespace
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// NamespaceDeletionRecordAttributesMap represents the map of attribute for NamespaceDeletionRecord.
var NamespaceDeletionRecordAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"DeleteTime": {
		AllowedChoices: []string{},
		BSONFieldName:  "deletetime",
		ConvertedName:  "DeleteTime",
		Description:    `Deletion date of the object.`,
		Exposed:        true,
		Name:           "deleteTime",
		Stored:         true,
		Type:           "time",
	},
	"Namespace": {
		AllowedChoices: []string{},
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace that got deleted.`,
		Exposed:        true,
		Name:           "namespace",
		Stored:         true,
		Type:           "string",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// NamespaceDeletionRecordLowerCaseAttributesMap represents the map of attribute for NamespaceDeletionRecord.
var NamespaceDeletionRecordLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `ID is the identifier of the object.`,
		Exposed:        true,
		Getter:         true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"deletetime": {
		AllowedChoices: []string{},
		BSONFieldName:  "deletetime",
		ConvertedName:  "DeleteTime",
		Description:    `Deletion date of the object.`,
		Exposed:        true,
		Name:           "deleteTime",
		Stored:         true,
		Type:           "time",
	},
	"namespace": {
		AllowedChoices: []string{},
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace that got deleted.`,
		Exposed:        true,
		Name:           "namespace",
		Stored:         true,
		Type:           "string",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description:    `Hash of the object used to shard the data.`,
		Getter:         true,
		Name:           "zHash",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Sharding zone.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseNamespaceDeletionRecordsList represents a list of SparseNamespaceDeletionRecords
type SparseNamespaceDeletionRecordsList []*SparseNamespaceDeletionRecord

// Identity returns the identity of the objects in the list.
func (o SparseNamespaceDeletionRecordsList) Identity() elemental.Identity {

	return NamespaceDeletionRecordIdentity
}

// Copy returns a pointer to a copy the SparseNamespaceDeletionRecordsList.
func (o SparseNamespaceDeletionRecordsList) Copy() elemental.Identifiables {

	copy := append(SparseNamespaceDeletionRecordsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseNamespaceDeletionRecordsList.
func (o SparseNamespaceDeletionRecordsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseNamespaceDeletionRecordsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseNamespaceDeletionRecord))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseNamespaceDeletionRecordsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseNamespaceDeletionRecordsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseNamespaceDeletionRecordsList converted to NamespaceDeletionRecordsList.
func (o SparseNamespaceDeletionRecordsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseNamespaceDeletionRecordsList) Version() int {

	return 1
}

// SparseNamespaceDeletionRecord represents the sparse version of a namespacedeletionrecord.
type SparseNamespaceDeletionRecord struct {
	// ID is the identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Deletion date of the object.
	DeleteTime *time.Time `json:"deleteTime,omitempty" msgpack:"deleteTime,omitempty" bson:"deletetime,omitempty" mapstructure:"deleteTime,omitempty"`

	// Namespace that got deleted.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Hash of the object used to shard the data.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Sharding zone.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseNamespaceDeletionRecord returns a new  SparseNamespaceDeletionRecord.
func NewSparseNamespaceDeletionRecord() *SparseNamespaceDeletionRecord {
	return &SparseNamespaceDeletionRecord{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseNamespaceDeletionRecord) Identity() elemental.Identity {

	return NamespaceDeletionRecordIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseNamespaceDeletionRecord) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseNamespaceDeletionRecord) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// MarshalBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNamespaceDeletionRecord) MarshalBSON() ([]byte, error) {

	if o == nil {
		return nil, nil
	}

	s := mongoAttributesSparseNamespaceDeletionRecord{}

	if o.ID != nil {
		objectID, err := primitive.ObjectIDFromHex(*o.ID)
		if err != nil {
			return nil, err
		}
		s.ID = objectID
	}
	if o.DeleteTime != nil {
		s.DeleteTime = o.DeleteTime
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return bson.Marshal(s)
}

// UnmarshalBSON implements the bson unmarshaling interface.
// This is used to transparently convert MongoDBID to ID.
func (o *SparseNamespaceDeletionRecord) UnmarshalBSON(raw []byte) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseNamespaceDeletionRecord{}
	if err := bson.Unmarshal(raw, s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.DeleteTime != nil {
		o.DeleteTime = s.DeleteTime
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseNamespaceDeletionRecord) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseNamespaceDeletionRecord) ToPlain() elemental.PlainIdentifiable {

	out := NewNamespaceDeletionRecord()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.DeleteTime != nil {
		out.DeleteTime = *o.DeleteTime
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetID returns the ID of the receiver.
func (o *SparseNamespaceDeletionRecord) GetID() (out string) {

	if o.ID == nil {
		return
	}

	return *o.ID
}

// SetID sets the property ID of the receiver using the address of the given value.
func (o *SparseNamespaceDeletionRecord) SetID(ID string) {

	o.ID = &ID
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseNamespaceDeletionRecord) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseNamespaceDeletionRecord) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseNamespaceDeletionRecord) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseNamespaceDeletionRecord) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseNamespaceDeletionRecord.
func (o *SparseNamespaceDeletionRecord) DeepCopy() *SparseNamespaceDeletionRecord {

	if o == nil {
		return nil
	}

	out := &SparseNamespaceDeletionRecord{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseNamespaceDeletionRecord.
func (o *SparseNamespaceDeletionRecord) DeepCopyInto(out *SparseNamespaceDeletionRecord) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseNamespaceDeletionRecord: %s", err))
	}

	*out = *target.(*SparseNamespaceDeletionRecord)
}

type mongoAttributesNamespaceDeletionRecord struct {
	ID         primitive.ObjectID `bson:"_id,omitempty"`
	DeleteTime time.Time          `bson:"deletetime"`
	Namespace  string             `bson:"namespace"`
	ZHash      int                `bson:"zhash"`
	Zone       int                `bson:"zone"`
}
type mongoAttributesSparseNamespaceDeletionRecord struct {
	ID         primitive.ObjectID `bson:"_id,omitempty"`
	DeleteTime *time.Time         `bson:"deletetime,omitempty"`
	Namespace  *string            `bson:"namespace,omitempty"`
	ZHash      *int               `bson:"zhash,omitempty"`
	Zone       *int               `bson:"zone,omitempty"`
}
