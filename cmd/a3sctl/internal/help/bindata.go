// Code generated by go-bindata.
// sources:
// ../../docs/a3sctl.md
// ../../docs/auth.md
// DO NOT EDIT!

package help

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz) // #nosec
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DocsA3sctlMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x41\x73\xe3\x36\x0f\xbd\xeb\x57\x60\x26\xdf\xe1\xeb\x8e\x2c\x1f\xf6\xe6\x69\x0f\x99\x4c\x76\x67\x3b\xed\x6e\xa7\xbb\x3d\xf4\x14\xc1\x12\x64\xb1\xa1\x08\x16\x24\xe5\x78\x0f\xfd\xed\x1d\x90\x8a\xe2\x24\x6e\xb7\x87\x4c\x6c\xf2\x01\x78\x78\xc4\x83\xaf\xae\x00\xdf\x86\x2e\xda\xaa\x2a\xff\xc1\x04\x40\xe8\x78\x9a\xd0\xf5\x60\x8d\x23\x30\x2e\x92\x0c\xd8\x11\xc4\x11\x23\xa0\xb5\x7c\x0c\x10\x19\x08\x83\xb1\x27\x50\xe0\x9f\xc9\x74\xf7\xf6\x54\xb0\xd8\xc5\xea\x68\xe2\x08\x08\x92\x9c\x33\xee\x00\xc6\x85\x88\xae\x23\xe0\x01\xd0\x69\x4d\x08\x24\x33\x49\x03\x1f\x1e\x53\xee\xaa\xea\xea\xea\x0a\x6e\x4a\xed\xb0\x32\xf2\xc2\xb3\xe9\x29\x40\x1c\x09\x06\x56\xac\xa6\x5c\x38\x6a\xd8\x1b\x68\x31\xc5\xb1\xdd\x81\x50\x14\x43\x33\x69\x11\xd3\x93\x8b\x26\x9e\x20\xf2\x3d\xb9\x26\xa3\xbc\x69\x77\x2b\x49\xc8\x24\x35\x2b\x7a\xa3\x0d\x75\x42\x18\x69\x7b\xa0\xb8\x4d\xbe\xd7\x8f\x3d\x59\x8a\x04\x42\x81\x93\x74\x14\x72\x96\x8e\x27\x6f\x29\x1a\x76\xed\x0e\xfa\x34\xf9\x00\x4f\x47\xd0\xd3\x60\x9c\xd1\x8f\x01\x06\x16\x98\x51\x0c\xa7\x00\x61\x24\x6b\x9b\xd2\xe3\x7b\xcb\x7b\xb4\x30\x58\x3c\x84\xaa\xfa\xf2\xac\xaf\x7c\x08\x28\xa4\x8d\x7b\x3c\x60\xa4\x5e\xc9\xa1\xb5\xf9\x2f\xa4\xfd\x8b\xde\x37\x9b\x8e\xdd\x60\x0e\xed\x0e\x3c\x6a\x47\xac\xed\xb3\x57\x0e\x68\xa1\x5c\x26\xc1\x4c\x6f\x30\x96\x4a\x90\xe5\xc3\xc6\xd2\x4c\x56\xbb\xa0\x7d\x3a\xd4\x60\xdc\xc0\x35\x1c\x51\x1c\xb0\x00\x89\xb0\x34\x05\x3c\x92\xf5\xad\x1e\xb6\x1b\xd5\xb9\x37\xc1\x5b\x3c\x81\x1e\xe7\x2e\x55\xc5\x2e\x89\x90\x8b\x8f\xec\x9a\xaa\xba\x9d\x49\x4e\xb9\x23\xe8\xd0\xc1\x5e\x95\xc4\x1e\x06\xe1\x09\xa6\x64\xa3\xf1\x96\xc0\x5b\xec\x28\xd4\x67\x12\x68\x32\x2f\xdc\x51\x28\x1d\xa6\x40\xe5\x8c\x83\x79\x28\xe9\xcc\xf0\x38\x17\x7d\x0d\x1c\x47\x92\xa3\x09\x54\x57\x6f\x4a\x85\xfc\xa8\x21\x70\x67\xb2\x7c\xe4\x66\x7d\x07\x8d\x0a\x14\x2f\x05\x64\x4a\xb9\x89\xac\x56\x96\xe9\xbf\xc0\x33\x99\x9e\x06\x4c\x36\x5e\xc6\x2f\x2a\xe6\x57\x96\x64\x49\x9f\x27\x0a\xba\x60\x31\x12\x60\xc9\x50\x9e\x8c\xdc\x6c\x84\xdd\xa4\x22\xea\xd8\xe0\xde\x52\x50\x47\x3e\x9b\xfc\x2c\x89\xd0\xc4\x33\xe9\xcb\xb4\x10\xd2\x30\x98\x87\x7c\x98\xb5\x84\x76\xd3\xc2\xfe\x04\xed\x5d\xab\xe2\x79\x4f\xd2\x61\x20\x20\x7d\x8d\x38\x1a\x77\xa8\xde\x00\xf6\x3d\x78\xa1\xc1\x3c\x40\x7b\xfd\xf6\xf3\xcd\x97\x9f\xee\xda\xaa\x7a\xc7\xb2\x7a\xb5\xd6\xec\x0e\x27\x0a\x1e\x3b\x6a\xe1\x68\xac\x85\x3d\x75\x3c\x11\xb4\xff\x5b\x62\x3e\x5e\xff\x7c\xfb\xf9\x97\xeb\x9b\xdb\x36\xef\x81\x76\xb3\x29\x4e\xc9\x81\x6d\x75\x31\xe6\xf3\xa7\xdf\x7e\xbd\xb9\xcd\xa1\x6d\xb3\x9a\x7e\xf1\xcf\x93\xef\x43\xf2\x9e\x25\x2e\xce\x01\x4c\x91\x9f\x6c\x56\xbc\x85\x20\xe8\x0e\x79\xab\x64\x50\x50\x9d\x19\xc8\xa9\x72\x2f\x22\x72\xc0\x1e\xc3\xb8\xab\x2a\x00\x80\x06\xbe\xff\xff\x52\xe9\x0c\xa4\x80\xef\x8a\x0e\x5f\x57\xa8\xde\xf7\x34\xc0\xdd\x82\x5f\x56\xe6\x3f\x67\xf9\xba\x26\x79\x67\xbe\x51\x70\x30\x2b\x16\x61\x62\xb5\x3d\xc9\x84\x6e\x31\xd2\xeb\xad\x92\x4d\x2a\x53\x76\x73\x0d\x42\x03\x89\x8e\xcf\x89\x93\x14\x11\xaa\x9e\xbb\xa4\x33\x94\x21\xab\xc0\xaf\x96\xc0\xa3\xce\xea\x4c\x75\x58\x0a\x24\xa5\x0e\xf5\xeb\x48\xe7\x41\xc7\x0b\x3b\x24\x2f\xee\xfc\xbc\x96\xf9\x5e\xc5\xad\x2e\xc1\xc0\xb8\x17\x7b\x7b\x60\xdb\x93\x84\x1a\x52\x78\xf4\xfa\x60\x24\x44\x60\xfd\xad\x89\x30\x98\x75\xb1\xfd\xb5\x6d\x4a\xc6\x6d\xa1\xba\x5d\x58\x35\x27\x9c\xac\xce\x76\xbb\x4d\x41\xb6\x96\x3b\xb4\x5b\x8a\xdd\x85\xfb\xd7\xa7\xd9\x88\x17\x88\x2e\x0b\xea\x28\x26\x46\x52\x95\xd7\xcd\x3d\xa1\xdc\x27\x0f\x16\xdd\x21\xe1\x81\x1a\xf8\x31\x85\xa8\x72\x55\xe8\x75\x47\x8b\x2e\x19\xa0\x87\x48\x2e\x92\x0b\x3a\x9d\x35\x58\x73\x4f\xd0\xfe\x11\xd8\x95\xb5\x19\x79\xb2\x3a\xed\xbf\x73\xca\xa5\x46\x9c\xa9\xbc\x77\x1c\x75\x5b\xbb\x8b\xa4\x8c\x2b\x0f\xab\x57\x8b\x72\x0d\x7c\x61\xfd\x1e\x85\x6d\x75\x1c\x4d\x37\xe6\xe0\xc8\xca\xa8\x56\xf8\xfa\xa2\xeb\x2f\x43\x71\xa3\xf2\x08\x14\x57\xbf\xdf\x7c\xfa\xf8\xee\xc3\xfb\xd5\x87\xe7\xde\xd7\x55\xa6\x99\x32\xcb\xb6\xa7\xb9\x88\x57\x3c\xee\x85\xfb\x26\xf7\x53\x2f\x65\xcf\x20\x75\x16\x86\x8c\xae\xc0\x65\xf0\x97\x39\x7b\x46\x06\x7a\x9a\xa1\x69\x9a\x0c\x78\xcd\xe7\x07\xbd\x5e\xe2\x14\x55\x5d\xbb\x7e\xad\x75\x5e\x5f\x0f\xbe\x5d\x4c\x23\xfe\xad\x5a\xbe\x3f\x2b\xf7\x77\x00\x00\x00\xff\xff\x08\xcc\xd2\x7a\x17\x09\x00\x00")

func DocsA3sctlMdBytes() ([]byte, error) {
	return bindataRead(
		_DocsA3sctlMd,
		"../../docs/a3sctl.md",
	)
}

func DocsA3sctlMd() (*asset, error) {
	bytes, err := DocsA3sctlMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../docs/a3sctl.md", size: 2327, mode: os.FileMode(420), modTime: time.Unix(1637627526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _DocsAuthMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x5b\x6b\x23\x47\x13\x7d\x9f\x5f\x51\xe0\x07\xc3\x87\x25\xf3\x65\xdf\x06\xf2\x60\xbc\x24\x2c\x6c\x36\xcb\x5a\x64\xc9\xdb\x94\xba\x4b\x9a\x42\x7d\x99\xf4\x45\xf2\xec\xaf\x0f\xd5\xdd\xa3\x8b\xe3\x40\x9e\xa4\xae\xa9\x3e\x75\xea\xd4\xa5\xef\xee\x00\x73\x1a\xbb\x6e\x33\x52\xf9\x07\x31\x6f\x95\xb7\x16\x9d\x06\x34\xc6\x9f\x22\x24\x0f\x81\x52\x60\x3a\x12\xa0\x03\xd6\xe4\x12\xa7\x19\x92\x3f\x90\x83\x5d\xf0\x16\xbc\x23\xf0\x3b\x48\x23\xc1\x11\x03\xfb\x1c\xbb\x98\xa7\xc9\x87\x54\x40\xe5\x82\xc2\xc4\xde\x41\xf4\x39\x28\x8a\x7d\xd7\xfd\x0f\x06\xfc\x10\x87\x1e\xe8\x55\x8d\xe8\xf6\x05\x9c\x5e\x39\x26\x76\x7b\xc0\x0f\x71\x09\xe0\x03\x20\x38\x3a\x49\x94\x75\xb9\x76\x92\x6b\x39\x12\x3c\x7d\x7f\x81\x97\xcd\x4b\xb5\xfe\xc8\x81\x16\xbb\xfc\x7f\xc3\xb4\x38\xa9\x91\xd4\x61\xe8\xa1\xfc\x16\xbe\xca\xbb\x44\x2e\x09\x7d\xbc\x72\xdc\xab\xa9\x61\xfd\xea\xfd\xde\x10\x3c\x1b\x9f\x35\x7c\x35\x98\x4a\xc6\xef\x60\x1b\x8d\xcb\x1d\x14\xd8\x1d\xef\x73\x20\x0d\x9f\x3f\x3e\x7d\x7d\x5f\x86\x72\xcd\x26\x13\x2f\xd7\x0c\x0b\x19\x45\x21\xf1\x4e\x9c\xab\x8f\x67\xad\xde\x83\xfe\xfd\xd3\xc7\xe7\x7f\x83\xee\xee\xee\xee\xe0\x0f\x34\xac\x39\xcd\x5d\xf7\xa7\xcf\xa0\xd0\x01\xc6\x43\x93\x54\xe5\x98\xbc\x6d\x2a\x1f\x9b\x23\x9c\x38\x8d\x45\x98\x9d\xc1\x3d\x0c\xab\xd5\xf2\x65\x58\x83\x34\x49\xa4\x70\xa4\xd0\x59\x9c\x41\x93\x62\x4d\xd2\x1f\x0a\xa7\x72\x27\xd0\x5f\x99\x62\x22\x2d\x46\x09\xa6\x2d\xbb\x6b\xc2\x16\x5f\xd9\x66\x0b\x86\x77\x04\x89\x6d\xe5\x09\xdf\x28\xa6\xc0\x4a\xf8\xc7\x0b\xd5\xd0\xac\x05\x5a\x93\xe1\x23\x85\x02\x2d\x84\xb7\x33\xe4\x28\x9d\x52\xb8\x7a\x69\x55\x39\x09\xeb\xd6\x5d\xab\xd5\x02\xb0\x72\x68\x29\x4e\xa8\xa4\x3f\xde\x03\x3b\xb1\x31\xe0\x9d\x99\x61\x4b\x55\x8a\xa2\x51\x1a\xa9\x03\x80\x33\x11\xd2\x70\x46\x5a\xbf\x0d\x41\xe9\xe4\xc3\xe1\xbf\x07\xe0\x9d\xd4\x53\x9f\x07\xa8\x44\x6a\x43\x34\x05\x7f\x64\x2d\xe1\x2a\xaa\x48\xcf\x71\x39\x81\xcd\x31\x15\x20\x8e\xbc\x35\x04\x18\x45\x6c\x1f\x78\xcf\x6d\x20\x17\xe6\x32\x46\xb5\x62\x6b\xf8\xb4\x83\xd9\xe7\xd2\x44\x5f\x9e\x36\x0f\xe5\xe0\xa8\xd6\x4a\x8c\x12\xf8\xcb\xd3\xe6\x9e\x34\xa0\xd6\x81\x62\x7c\x9b\xe3\x44\xc1\x72\x8c\x52\xa5\xa1\x87\xef\x23\x26\x3a\x52\x00\x8e\xe5\x6e\xa4\x32\x45\x57\x4e\x75\x83\x90\x16\x5b\xa5\x93\xd3\xe8\x03\xff\xa8\x9d\x3a\x79\xc3\x8a\x29\x3e\x5c\x55\xda\x57\x95\x6e\x44\xb8\x42\x5c\x17\x98\x6f\x97\x7a\x5c\x47\x5b\x64\x91\x91\x46\x76\xa4\x81\x5d\xf2\x05\x0b\x55\xca\x68\x66\xd8\x07\x74\x89\x74\x41\xb9\xbe\x1a\x29\xb5\x89\x79\x36\x1e\x0f\xec\xf6\xb5\x0d\xa5\xcd\x4f\xe8\x0a\x31\xc3\x96\x6b\x2f\xba\x6c\xb7\x14\x24\xd9\xf3\x1a\x50\x06\xd9\x8a\x0e\x98\x6a\xb1\xb7\x04\x64\xb7\xa4\x1b\x8b\xee\x9d\xae\x58\x9f\x83\x5d\xad\xda\x09\x63\xac\x68\x30\x05\xda\xf1\x2b\x35\xd4\x92\x9d\xc5\xa4\x46\x60\xd7\xf9\xa0\x29\x94\x26\xe5\x42\x6e\x4b\x52\xb4\x12\xac\x50\x6c\x01\x7e\x11\x07\x97\xd0\x29\x7a\x28\x33\x79\x9e\xfe\xda\x97\x22\x76\xd7\xf4\x12\x1e\xb3\xcf\x01\x70\x4f\xb5\x3b\x64\x08\xa5\x33\x86\xd5\x4a\x09\x53\xf9\xf2\xf3\xd0\x84\x7a\xca\x9a\xc9\x29\xba\x5d\x2d\x75\x6f\x2f\x99\x9e\xe3\x48\xcc\xf6\x32\x00\xb6\x8b\x75\x9f\x2c\x6b\x66\xb1\x0e\x9d\x40\x6d\xa9\x0e\x87\xcd\x26\xf1\x64\xea\xae\x10\x60\x69\xb2\x2a\x65\x64\x11\xf2\x02\x26\xa9\xd2\x2b\xda\xc9\x50\xdf\x95\x02\x5f\x40\xc1\xce\x38\x4d\xff\xff\x87\xe5\xa7\x25\x15\x91\xe6\x66\x8d\x5e\xb2\x3a\x6f\x2f\xc9\x4d\x25\x03\xd5\xd7\x5b\x14\x5f\x63\xe6\xb6\x96\xeb\xde\x95\xa6\x28\x22\xaa\xd1\xb3\x12\xca\xdd\xe5\xf1\x6c\x62\xc8\xdb\x1a\x48\x5e\x34\x4e\x70\x1a\xc9\x95\x31\x24\xbd\x86\x8d\x07\xed\x21\xfa\xdb\xe1\x44\xad\x05\x9f\xca\x7e\xec\x64\x03\x69\x18\x84\x82\x50\x1e\x96\x8a\x37\x76\x0b\xdd\x3a\x62\x3b\x36\xb2\x62\x45\x1b\xe7\x4f\x0f\x8b\x53\x99\xb1\xe5\x85\x8e\x09\xcb\x12\x29\xaf\x7f\x4d\xc2\xf0\x81\xea\xbb\xe5\x03\xfc\xb6\xf9\xfc\xd2\x30\x6e\xf5\x5d\x28\xf4\xe5\x04\x40\x4e\x80\x7a\x90\x17\xad\x99\xe4\xef\xf2\x19\xca\xb3\xd6\xc3\xe3\x84\x69\x7c\x4c\xfe\x31\x47\x0a\x2b\xb1\xad\x27\xb2\x67\xa7\x03\xcd\x6f\x7d\x0e\x34\xdf\xb8\xc8\x8c\xf4\x70\xbf\xba\x3f\x5b\x2a\xef\x4b\x24\x28\x8b\xba\x87\xe0\x7d\x7a\x63\x2c\xdb\xbb\x87\xc7\xee\xef\x00\x00\x00\xff\xff\xc7\x7f\x70\x39\xfc\x08\x00\x00")

func DocsAuthMdBytes() ([]byte, error) {
	return bindataRead(
		_DocsAuthMd,
		"../../docs/auth.md",
	)
}

func DocsAuthMd() (*asset, error) {
	bytes, err := DocsAuthMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../docs/auth.md", size: 2300, mode: os.FileMode(420), modTime: time.Unix(1637627526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../docs/a3sctl.md": DocsA3sctlMd,
	"../../docs/auth.md": DocsAuthMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"docs": {nil, map[string]*bintree{
				"a3sctl.md": {DocsA3sctlMd, map[string]*bintree{}},
				"auth.md": {DocsAuthMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

